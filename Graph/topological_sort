#include <iostream>
#include <list>
#include <stack>
#include <algorithm>

using namespace std;

class graph
{
    int nov;
    list<int> *adj;
    void topological_sort_util(int v, bool visited[], stack<int> &s);

public:
    graph(int V);
    void addEdge(int v, int w);
    void topological_sort();
};

graph::graph(int V)
{
    this->nov= V;
    adj= new list<int>[V];     // array of lists
}

void graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
}


void graph::topological_sort_util(int v, bool visited[], stack<int> &s )
{
    visited[v] = true;
    list<int>::iterator i;
    for(i= adj[v].begin(); i!= adj[v].end(); i++)
    {
        if( !visited[*i] )
            topological_sort_util(*i, visited, s);
    }

    s.push(v);
}

void graph::topological_sort()
{
    int V= nov;
    stack<int> s;

    bool* visited= new bool[V];
    for(int i=0; i<V; i++)
        visited[i]= false;

    for(int i=0; i<V; i++)
    {
        if( !visited[i] )
            topological_sort_util(i, visited, s);
    }

    while( !s.empty() )
    {
        cout<<s.top()<<" ";
        s.pop();
    }
}


int main()
{
    graph g(6);
    g.addEdge(5, 2);
    g.addEdge(5, 0);
    g.addEdge(4, 0);
    g.addEdge(4, 1);
    g.addEdge(2, 3);
    g.addEdge(3, 1);

    cout << "Following is a Topological Sort of the given graph \n";
    g.topological_sort();

    return 0;
}
