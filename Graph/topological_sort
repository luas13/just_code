#include <iostream>
#include <list>
#include <stack>
#include <algorithm>

using namespace std;

class graph
{
    int nov;
    list<int> *adj;
    void topological_sort_util(int v, bool visited[], stack<int> &s);

public:
    graph(int V);
    void addEdge(int v, int w);
    void topological_sort();
};

graph::graph(int V)
{
    this->nov= V;
    adj= new list<int>[V];     // array of lists
}

void graph::addEdge(int v, int w)
{
    adj[v].push_back(w);
}


void graph::topological_sort_util(int v, bool visited[], stack<int> &s )
{
    visited[v] = true;
    list<int>::iterator i;
    for(i= adj[v].begin(); i!= adj[v].end(); i++)
    {
        if( !visited[*i] )
            topological_sort_util(*i, visited, s);
    }

    s.push(v);
}

void graph::topological_sort()
{
    int V= nov;
    stack<int> s;

    bool* visited= new bool[V];
    for(int i=0; i<V; i++)
        visited[i]= false;

    for(int i=0; i<V; i++)
    {
        if( !visited[i] )
            topological_sort_util(i, visited, s);
    }

    while( !s.empty() )
    {
        cout<<s.top()<<" ";
        s.pop();
    }
}


int main()
{
    graph g(6);
    g.addEdge(5, 2);
    g.addEdge(5, 0);
    g.addEdge(4, 0);
    g.addEdge(4, 1);
    g.addEdge(2, 3);
    g.addEdge(3, 1);

    cout << "Following is a Topological Sort of the given graph \n";
    g.topological_sort();

    return 0;
}


----------------------------------------------------------------------------------------------------
// Using vector of bool, Make sure you pass reference in vector<bool>

// A C++ program to print topological sorting of a DAG
#include<iostream>
#include <list>
#include <stack>
#include <vector>
using namespace std;

class Graph{
	int V;
	list<int> *adj;
	void topologicalsortUtil(stack<int> &s, vector<bool> &visited, int v);

public:
	Graph(int V);
	void addEdge(int a, int b);
	void topologicalsort();
};


Graph::Graph(int v)
{
	this->V = v;
	adj = new list<int>[v];
}

void Graph::addEdge(int a, int b)
{
	adj[a].push_back(b);
}

void Graph::topologicalsortUtil(stack<int> &s, vector<bool> &visited, int v)
{
	visited[v] = true;
	list<int>::iterator i;
	for(i = adj[v].begin(); i!= adj[v].end(); i++)
	{
		if (!visited[*i])
			topologicalsortUtil(s, visited, *i);
	}

	s.push(v);
}

void Graph::topologicalsort()
{
	stack<int> s;   
	vector<bool> visited(V, false);
	for(int i=0; i<V; i++)
		if (!visited[i])
			topologicalsortUtil(s, visited, i);

	while(!s.empty())
	{
		cout<<s.top()<<" ";
		s.pop();
	}
}

int main()
{
	Graph g(6);
	g.addEdge(5, 2);
	g.addEdge(5, 0);
    g.addEdge(4, 0);
    g.addEdge(4, 1);
    g.addEdge(2, 3);
    g.addEdge(3, 1);
 
    cout << "Following is a Topological Sort of the given graph n \n";
    g.topologicalsort();
 
    return 0;
}
