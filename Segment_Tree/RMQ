#include <iostream>
#include <math.h>

using namespace std;

int RMQ_util( int* st, int ss, int se, int qs, int qe, int index)
{
    if(qs <= ss && qe>=se)
        return st[index];

    if(qe < ss || qs > se)
        return INT_MAX;

    int mid= ss + (se - ss)/2;
    return min( RMQ_util( st, ss, mid, qs, qe, (2*index)+1 ), RMQ_util( st, mid+1, se, qs, qe, (2*index)+2 ) );
}


int RMQ(int* st, int n, int qs, int qe)
{
    if(qs>qe || qs<0 || qs>=n)
    {
        cout<<"Invalid Input !!!\n";
        return 0;
    }

    return ( RMQ_util(st, 0, n-1, qs, qe, 0) );

}



//st - segment tree array
//ss- segment start,  se- segment end
// index- index of current node in segment tree st

int constructST_util(int* st, int* arr, int ss, int se, int index)
{
    if(ss == se)
    {
        st[index]= arr[ss];     // imp line
        return arr[ss];
    }

    int mid= ss + (se - ss)/2 ;
    st[index] = min( constructST_util(st, arr, ss, mid, (2*index) + 1 ) , constructST_util(st, arr, mid+1, se, (2*index) + 2 ) );
    return st[index];
}



int* constructST(int* arr, int n)
{
    int x= ceil( log2(n));
    int s= ( 2* pow(2,x) ) -1;
    int* st= new int[s];
    constructST_util(st, arr, 0, n-1, 0);
    return st;
}


int main()
{
    int arr[] = {1, 3, 5, 7, 2, 11};
    int n = sizeof(arr)/sizeof(arr[0]);

    int *st = constructST(arr, n);

    int qs = 1;  // Starting index of query range
    int qe = 5;  // Ending index of query range

    // Print minimum value in arr[qs..qe]
    printf("Minimum of values in range [%d, %d] is = %d\n",qs, qe, RMQ(st, n, qs, qe));

    return 0;
}
