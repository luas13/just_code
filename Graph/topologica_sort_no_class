/*Topological Sort= DFS + Stack

We can modify DFS to find Topological Sorting of a graph. In DFS, we start from a vertex, we first print it and
then recursively call DFS for its adjacent vertices. In topological sorting, we use a temporary stack. We don’t print
the vertex immediately, we first recursively call topological sorting for all its adjacent vertices, then push it to 
a stack. Finally, print contents of stack. Note that a vertex is pushed to stack only when all of its adjacent vertices
(and their adjacent vertices and so on) are already in stack. 

*/
// A C++ program to print topological sorting of a DAG
#include<iostream>
#include <list>
#include <stack>
using namespace std;
 
// Class to represent a graph
typedef struct graph
{
    int V;    // No. of vertices'
    list<int> *adj; // Pointer to an array containing adjacency listsList
    
}Graph;
 
Graph* createGraph(int V)
{
    Graph* g= (Graph*)malloc(sizeof(Graph));
    g->V = V;
    g->adj = new list<int>[V];
    return g;
}
 
void addEdge(Graph *g, int v, int w)
{
    g->adj[v].push_back(w); // Add w to v’s list.
}
 
// A recursive function used by topologicalSort
void topologicalSortUtil(Graph* g, int v, bool visited[], stack<int> &Stack)
{
    // Mark the current node as visited.
    visited[v] = true;
 
    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for (i = g->adj[v].begin(); i != g->adj[v].end(); ++i)
        if (!visited[*i])
            topologicalSortUtil(g, *i, visited, Stack);
 
    // Push current vertex to stack which stores result
    Stack.push(v);
}
 
// The function to do Topological Sort. It uses recursive topologicalSortUtil()
void topologicalSort(Graph* g)
{
    stack<int> Stack;
 
    // Mark all the vertices as not visited
    bool *visited = new bool[g->V];
    for (int i = 0; i < g->V; i++)
        visited[i] = false;
 
    // Call the recursive helper function to store Topological Sort
    // starting from all vertices one by one
    for (int i = 0; i < g->V; i++)
      if (visited[i] == false)
        topologicalSortUtil(g, i, visited, Stack);
 
    // Print contents of stack
    while (Stack.empty() == false)
    {
        cout << Stack.top() << " ";
        Stack.pop();
    }
}
 
// Driver program to test above functions
int main()
{
    // Create a graph given in the above diagram
    Graph *g= createGraph(6);
    addEdge(g, 5, 2);
    addEdge(g, 5, 0);
    addEdge(g, 4, 0);
    addEdge(g, 4, 1);
    addEdge(g, 2, 3);
    addEdge(g, 3, 1);
 
    cout << "Following is a Topological Sort of the given graph \n";
    topologicalSort(g);
 
    //getchar();
    return 0;
}
