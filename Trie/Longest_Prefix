//Using Trie, a simple implementation

#include <iostream>
#include <vector>
#include <string>
#include <cstring>

using namespace std;
char buffer1[1000];

typedef struct trie_node
{
    bool isEnd;
    struct trie_node* child[26];
}mytrie;



mytrie* get_Trie_node()
{
    mytrie* temp= new mytrie;
    temp->isEnd = false;
    for(int i=0; i<26; i++)
        temp->child[i] =NULL;
    return temp;
}

void insert_tnode(mytrie** root, char* word)
{
    if( ! (*root) )
        *root= get_Trie_node();

    if( *word != '\0')
        insert_tnode( &( (*root)->child[tolower(*word) - 'a'] ), word+1 );

    else
    {
        (*root)->isEnd = 1;
    }
}

//***********************************************************************************************

void longest_prefix(mytrie* t, char* word )
{

    int l= strlen(word);
    if( l == 0 )
        return;

    char* wcopy= new char[l+1];
    strcpy(wcopy, word);

    char* buffer= new char[l+1];
    int k=0;
    int maxi=-1;

    while( *word )
    {
        int index= *word - 'a';

        if( !( t->child[index] ) )
        {
            break;
        }

        buffer[k]= *word;
        if( t->child[index]->isEnd )
            maxi=k;
        k++;
        t= t->child[index];
        ++word;
    }

    buffer[++maxi] = '\0';

    cout<<"Longest prefix of "<<wcopy<<" is "<<buffer<<endl;

}

//************************************************************************************************

int main()
{
    char* wordArr[] = {"are", "area", "base", "cat", "cater", "children", "basement", "caterer"};
    int size = sizeof(wordArr) / sizeof(wordArr[0]);

    mytrie* root= NULL;
    for(int i=0; i<size; i++)
        insert_tnode(&root, wordArr[i]);

    longest_prefix(root, "catererabc" );
    longest_prefix(root, "child" );


    return 0;
}
